{"version":3,"sources":["components/Header/Header.js","components/Map/Map.js","pages/Main/Main.js","actions/index.js","constants/index.js","pages/PageNotFound/PageNotFound.js","App.js","reducers/index.js","index.js"],"names":["Header","connect","state","total","points","clusterPoints","width","height","useState","option","latitude","longitude","zoom","viewport","setViewport","mapRef","useRef","bounds","current","getMap","getBounds","toArray","flat","useSupercluster","options","radius","maxZoom","generalClusters","clusters","generalSupercluster","supercluster","reduce","countriesPoints","country","point","geometry","type","provincePoints","length","countryClusters","countrySupercluster","getVirusInfo","cluster","superclusterX","properties","getChildren","id","clusterX","cases","getTotal","mapboxApiAccessToken","process","onViewportChange","mapStyle","ref","map","key","coordinates","onClick","console","log","className","style","isCluster","count","point_count","countryCode","province","cityCode","mapDispatchToProps","fetchVirusData","dispatch","axios","get","then","res","virusData","catch","error","status","fetchDates","fetchCountries","date","fetchTotalCases","fetchPoints","fetchClusterPoints","didFetchData","setDidFetchData","useEffect","PageNotFound","App","exact","path","to","INITIAL_STATE","dates","Map","countries","dailyTotal","rootReducer","action","data","forEach","has","Date","set","keys","size","place","provinces","cities","totalCases","Country","Province","City","places","active","Active","totalConfirmed","Confirmed","totalDeaths","Deaths","totalRecovered","Recovered","Lon","Lat","CountryCode","dt","Object","index","day","category","parseFloat","city","CityCode","totalPoints","pointsX","pointsThing","filter","location","confirmed","deaths","recovered","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3932211.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n  return (\n    <nav>\n      Nav bar\n    </nav>\n  )\n}\n\nexport default Header\n","import React, { useState, useRef, useEffect } from 'react'\nimport { connect } from 'react-redux';\nimport ReactMapGL, { Marker, FlyToInterpolator } from 'react-map-gl';\nimport useSupercluster from 'use-supercluster';\n\nimport { fetchCountries } from '../../actions';\n\nconst Map = ({ width, height, points, total, clusterPoints }) => {\n  const options = {\n    ACTIVE: 'active',\n    CONFIRMED: 'totalConfirmed',\n    DEATHS: 'totalDeaths',\n    RECOVERED: 'totalRecovered',\n    DEFAULT: 'totalDeaths'\n  }\n\n  const [option, setOption] = useState(options.DEFAULT);\n\n  // setup map\n  const [viewport, setViewport] = useState({\n    latitude: 0,\n    longitude: 0,\n    width: width,\n    height: height,\n    zoom: 0,\n  });\n\n  const mapRef = useRef();\n\n  // get map bounds\n  const bounds = mapRef.current ? mapRef.current.getMap().getBounds().toArray().flat() : null;\n\n  // get clusters\n  const { clusters: generalClusters, supercluster: generalSupercluster } = useSupercluster({\n    points: clusterPoints,\n    zoom: viewport.zoom,\n    bounds,\n    options: {\n      radius: 75,\n      maxZoom: 20\n    }\n  });\n\n  const { clusters: countryClusters, supercluster: countrySupercluster } = useSupercluster({\n    points: points.reduce((countriesPoints, country) => country.point.geometry.type === 'None' || country.provincePoints.length > 0\n      ? countriesPoints\n      : [...countriesPoints, country.point], []),\n    zoom: viewport.zoom,\n    bounds,\n    options: {\n      radius: 75,\n      maxZoom: 20\n    }\n  });\n\n  // get virus information from all clusters\n  const getVirusInfo = (cluster, superclusterX) => {\n    if (!cluster.properties.cluster)\n      return cluster.properties.cases[option];\n\n    return superclusterX.getChildren(cluster.id).reduce((total, clusterX) => total + getVirusInfo(clusterX, superclusterX), 0);\n  }\n\n  const getTotal = () => total[option];\n\n  return (\n    <>\n      <ReactMapGL\n        {...viewport}\n        maxZoom={20}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        onViewportChange={viewport => setViewport(viewport)}\n        mapStyle='mapbox://styles/mapbox/dark-v10'\n        ref={mapRef}\n      >\n        {countryClusters.map(cluster => getVirusInfo(cluster, countrySupercluster) ? (\n          <Marker key={`countryCluster-${cluster.id ? cluster.id : cluster.properties.country}`} latitude={cluster.geometry.coordinates[1]} longitude={cluster.geometry.coordinates[0]}>\n            <div\n              onClick={() => console.log(cluster, getVirusInfo(cluster, countrySupercluster))}\n              className={getVirusInfo(cluster, countrySupercluster) ? 'country-marker' : 'zero-marker'}\n              style={{\n                width: `${5 + viewport.zoom / 5 + (getVirusInfo(cluster, countrySupercluster) / getTotal()) * (200 + viewport.zoom * 300) + (getTotal() / (getVirusInfo(cluster, countrySupercluster) * 1000000) / 5)}px`,\n                height: `${5 + viewport.zoom / 5 + (getVirusInfo(cluster, countrySupercluster) / getTotal()) * (200 + viewport.zoom * 300) + (getTotal() / (getVirusInfo(cluster, countrySupercluster) * 1000000) / 5)}px`\n              }} />\n          </Marker>\n        ) : null)}\n        {generalClusters.map(cluster => {\n          const [longitude, latitude] = cluster.geometry.coordinates;\n          const {\n            cluster: isCluster,\n            point_count: pointCount\n          } = cluster.properties;\n\n          let count = getVirusInfo(cluster, generalSupercluster);\n\n          if (isCluster) {\n            return count ? (\n              <Marker key={`generalCluster-${cluster.id}`} latitude={latitude} longitude={longitude}>\n                <div\n                  className={getVirusInfo(cluster, generalSupercluster) ? 'cluster-marker' : 'zero-marker'}\n                  style={{\n                    width: `${5 + viewport.zoom / 5 + (count / getTotal()) * (200 + viewport.zoom * 300) + (getTotal() / (count * 1000000) / 5)}px`,\n                    height: `${5 + viewport.zoom / 5 + (count / getTotal()) * (200 + viewport.zoom * 300) + (getTotal() / (count * 1000000) / 5)}px`\n                  }}\n                  onClick={() => console.log(generalSupercluster.getChildren(cluster.id))}\n                />\n              </Marker>\n            ) : null;\n          }\n          return count ? (\n            <Marker key={`${cluster.properties.countryCode}${cluster.properties.province ? '-' + cluster.properties.province : ''}${cluster.properties.cityCode ? '-' + cluster.properties.cityCode : ''}`} latitude={latitude} longitude={longitude}>\n              <div\n                onClick={() => console.log(cluster)}\n                className={getVirusInfo(cluster, generalSupercluster) ? 'cluster-marker' : 'zero-marker'}\n                style={{\n                  width: `${5 + viewport.zoom / 5 + (count / getTotal()) * (200 + viewport.zoom * 300) + (getTotal() / (count * 1000000) / 5)}px`,\n                  height: `${5 + viewport.zoom / 5 + (count / getTotal()) * (200 + viewport.zoom * 300) + (getTotal() / (count * 1000000) / 5)}px`\n                }}\n              />\n            </Marker>\n          ) : null;\n        })}\n      </ReactMapGL>\n      <button onClick={() => console.log(points)}>Show Points</button>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  total: state.total,\n  points: state.points,\n  clusterPoints: state.clusterPoints,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux';\n\nimport { fetchVirusData, fetchDates, fetchCountries, fetchTotalCases, fetchPoints, fetchClusterPoints } from '../../actions';\n\nimport Header from '../../components/Header/Header';\nimport Map from '../../components/Map/Map';\n\nconst Main = ({ virusData, points, clusterPoints, fetchVirusData, fetchDates, fetchCountries, fetchTotalCases, fetchPoints, fetchClusterPoints }) => {\n  const [didFetchData, setDidFetchData] = useState(false);\n\n  useEffect(() => {\n    if (!didFetchData) {\n      console.log('Getting Virus Data');\n      fetchVirusData();\n      setDidFetchData(true);\n    }\n\n    if (didFetchData && virusData) {\n      console.log('Getting Dates');\n      fetchDates();\n      console.log('Getting Countries');\n      fetchCountries();\n      console.log('Getting Total Cases');\n      fetchTotalCases();\n      console.log('Getting Points');\n      fetchPoints();\n      fetchClusterPoints();\n    }\n  }, [virusData]);\n\n  return (\n    <>\n      <Header />\n      <div className='container'>\n        {console.log(points)}\n        {points.length > 0 && clusterPoints.length > 0 ? <Map width='100%' height='50vh' /> : <h1>Loading . . .</h1>}\n      </div>\n    </>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  virusData: state.virusData,\n  points: state.points,\n  clusterPoints: state.clusterPoints,\n});\n\nconst mapDispatchToProps = {\n  fetchVirusData,\n  fetchDates,\n  fetchCountries,\n  fetchTotalCases,\n  fetchPoints,\n  fetchClusterPoints\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","import { FETCH_VIRUS_DATA, FETCH_COUNTRIES, FETCH_DATES, FETCH_TOTAL_CASES, FETCH_POINTS, FETCH_CLUSTER_POINTS } from '../constants';\n\nimport axios from 'axios';\n\nconst fetchVirusData = () => dispatch => {\n  axios.get('https://api.covid19api.com/all')\n    // axios.get('https://api.covid19api.com/countries')\n    .then(res => {\n      return dispatch({\n        type: FETCH_VIRUS_DATA,\n        virusData: res\n      })\n    })\n    .catch(res => {\n      console.error(res);\n      return dispatch({\n        type: FETCH_VIRUS_DATA,\n        virusData: {\n          status: 404,\n        }\n      })\n    });\n\n};\n\nconst fetchDates = () => ({\n  type: FETCH_DATES,\n});\n\nconst fetchCountries = date => ({\n  type: FETCH_COUNTRIES,\n  date: date\n});\n\nconst fetchTotalCases = date => ({\n  type: FETCH_TOTAL_CASES,\n  date: date\n})\n\nconst fetchPoints = date => ({\n  type: FETCH_POINTS,\n  date: date\n})\n\nconst fetchClusterPoints = date => ({\n  type: FETCH_CLUSTER_POINTS,\n  date: date\n})\n\nexport { fetchVirusData, fetchDates, fetchCountries, fetchTotalCases, fetchPoints, fetchClusterPoints };","export const FETCH_VIRUS_DATA = 'FETCH_VIRUS_DATA';\nexport const FETCH_DATES = 'FETCH_DATES';\nexport const FETCH_COUNTRIES = 'FETCH_COUNTRIES';\nexport const FETCH_TOTAL_CASES = 'FETCH_TOTAL_CASES';\nexport const FETCH_POINTS = 'FETCH_POINTS';\nexport const FETCH_CLUSTER_POINTS = 'FETCH_CLUSTER_POINTS';","import React from 'react';\n\nimport Header from '../../components/Header/Header';\n\nconst PageNotFound = () => (\n  <>\n    <Header />\n    <div className='container'>\n      <h1>404 Page Not Found</h1>\n    </div>\n  </>\n);\n\nexport default PageNotFound;","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport Main from './pages/Main/Main';\nimport PageNotFound from './pages/PageNotFound/PageNotFound';\n\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <Switch>\n      <Route exact path='/'>\n        <Redirect to='/covid-map-app/' />\n      </Route>\n      <Route exact path='/covid-map-app/'>\n        <Main />\n      </Route>\n      <PageNotFound />\n    </Switch>\n  </div>\n);\n\nexport default App;\n","import { FETCH_VIRUS_DATA, FETCH_DATES, FETCH_TOTAL_CASES, FETCH_COUNTRIES, FETCH_POINTS, FETCH_CLUSTER_POINTS } from '../constants';\n\nconst INITIAL_STATE = {\n  virusData: {},\n  dates: new Map(),\n  countries: new Map(),\n  points: [],\n  total: 0,\n  dailyTotal: [],\n};\n\nconst rootReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case FETCH_VIRUS_DATA:\n      console.log('Virus Data', action.virusData);\n      return {\n        ...state,\n        virusData: action.virusData,\n      };\n    case FETCH_DATES:\n      let dates = new Map();\n      state.virusData.data.forEach(data => dates.has(data.Date) ? dates.set(data.Date, [...dates.get(data.Date), data]) : dates.set(data.Date, [data]));\n\n      console.log('Dates', dates);\n\n      return {\n        ...state,\n        dates: dates,\n      };\n    case FETCH_COUNTRIES:\n      let countries = new Map();\n      state.dates.get(action.date ? action.date : [...state.dates.keys()][state.dates.size - 2]).forEach(place => {\n        let provinces = new Map();\n        let cities = new Map();\n        let totalCases = {};\n        let coordinates = {};\n\n        if (countries.has(place.Country)) {\n          provinces = countries.get(place.Country).provinces;\n          if (place.Province.length > 0) {\n            if (countries.get(place.Country).provinces.has(place.Province)) {\n              cities = countries.get(place.Country).provinces.get(place.Province).cities;\n              if (place.City && !cities.has(place.City)) {\n                cities.set(place.City, place);\n              }\n            }\n            if (provinces.has(place.Province))\n              provinces.set(place.Province, { places: [...provinces.get(place.Province).places, place], cities: cities });\n            else\n              provinces.set(place.Province, { places: [place], cities: cities });\n          }\n\n          if (!place.Province && (!place.City || place.City === 'Unassigned')) {\n            totalCases = {\n              active: place.Active,\n              totalConfirmed: place.Confirmed,\n              totalDeaths: place.Deaths,\n              totalRecovered: place.Recovered\n            }\n            coordinates = {\n              Lon: place.Lon,\n              Lat: place.Lat\n            }\n          } else {\n            totalCases = countries.get(place.Country).totalCases;\n            coordinates = countries.get(place.Country).coordinates;\n          }\n\n          countries.set(place.Country, {\n            places: [...countries.get(place.Country).places, place],\n            totalCases: totalCases,\n            coordinates: coordinates,\n            countryCode: place.CountryCode,\n            provinces: provinces\n          });\n        } else {\n          if (place.Province.length > 0) {\n            if (place.City) {\n              cities.set(place.City, place);\n            }\n            provinces.set(place.Province, { places: [place], cities: cities });\n          }\n          if (!place.Province && (!place.City || place.City === 'Unassigned')) {\n            totalCases = {\n              active: place.Active,\n              totalConfirmed: place.Confirmed,\n              totalDeaths: place.Deaths,\n              totalRecovered: place.Recovered\n            }\n            coordinates = {\n              Lon: place.Lon,\n              Lat: place.Lat\n            }\n          }\n\n          countries.set(place.Country, {\n            places: [place],\n            totalCases: totalCases,\n            coordinates: coordinates,\n            countryCode: place.CountryCode,\n            provinces: provinces\n          });\n        }\n      })\n\n      console.log('Countries', countries);\n\n      return {\n        ...state,\n        countries: countries,\n      }\n    case FETCH_TOTAL_CASES:\n      let total = [...state.countries.keys()].reduce((dt, country) => Object.keys(state.countries.get(country).totalCases).length > 0\n        ? ({\n          ...dt,\n          active: dt.active + state.countries.get(country).totalCases.active,\n          totalConfirmed: dt.totalConfirmed + state.countries.get(country).totalCases.totalConfirmed,\n          totalDeaths: dt.totalDeaths + state.countries.get(country).totalCases.totalDeaths,\n          totalRecovered: dt.totalRecovered + state.countries.get(country).totalCases.totalRecovered,\n        })\n        : ({\n          ...dt,\n          ...state.countries.get(country).places.reduce((total, place, index) => ({\n            active: total.active + place.Active,\n            totalConfirmed: total.totalConfirmed + place.Confirmed,\n            totalDeaths: total.totalDeaths + place.Deaths,\n            totalRecovered: total.totalRecovered + place.Recovered,\n          }), dt)\n        }), {\n        day: action.date ? action.date : [...state.dates.keys()][state.dates.size - 2],\n        active: 0,\n        totalConfirmed: 0,\n        totalDeaths: 0,\n        totalRecovered: 0\n      })\n\n      console.log('Total', total);\n\n      return {\n        ...state,\n        total: total\n      }\n    case FETCH_POINTS:\n      let countriesPoints = new Map();\n      let provincesPoints = new Map();\n      let points = [...state.countries.keys()].map(country => ({\n        point: {\n          type: 'Feature',\n          properties: {\n            cluster: false,\n            category: 'country',\n            cases: Object.keys(state.countries.get(country).totalCases).length > 0\n              ? state.countries.get(country).totalCases\n              : state.countries.get(country).places.reduce((total, place) => place.Province.length > 0 || place.City.length > 0\n                ? ({\n                  active: total.active + place.Active,\n                  totalConfirmed: total.totalConfirmed + place.Confirmed,\n                  totalDeaths: total.totalDeaths + place.Deaths,\n                  totalRecovered: total.totalRecovered + place.Recovered,\n                })\n                : total, {\n                active: 0,\n                totalConfirmed: 0,\n                totalDeaths: 0,\n                totalRecovered: 0\n              }),\n            // city: location.City,\n            // cityCode: location.CityCode,\n            country: country,\n            countryCode: state.countries.get(country).countryCode,\n            // province: location.Province,\n          },\n          geometry: {\n            type: Object.keys(state.countries.get(country).coordinates).length > 0 ? 'Point' : 'None',\n            coordinates: Object.keys(state.countries.get(country).coordinates).length > 0\n              ? [\n                parseFloat(state.countries.get(country).coordinates.Lon),\n                parseFloat(state.countries.get(country).coordinates.Lat)\n              ]\n              : []\n          }\n        },\n        provincePoints: state.countries.get(country).provinces\n          ? [...state.countries.get(country).provinces.keys()].map(province => (\n            state.countries.get(country).provinces.get(province).places.map(place => ({\n              type: 'Feature',\n              properties: {\n                cluster: false,\n                category: place.City ? 'city' : 'province',\n                cases: {\n                  active: place.Active,\n                  totalConfirmed: place.Confirmed,\n                  totalDeaths: place.Deaths,\n                  totalRecovered: place.Recovered\n                },\n                city: place.City,\n                cityCode: place.CityCode,\n                country: country,\n                countryCode: state.countries.get(country).countryCode,\n                province: place.Province,\n              },\n              geometry: {\n                type: 'Point',\n                coordinates: [\n                  parseFloat(place.Lon),\n                  parseFloat(place.Lat)\n                ]\n              }\n            }))\n          ))\n          : []\n      }))\n\n      console.log('Points', points)\n\n\n      return {\n        ...state,\n        points: points\n      }\n    case FETCH_CLUSTER_POINTS:\n      let clusterPoints = state.points.reduce((totalPoints, points) => points.provincePoints.length > 0\n        ? [...totalPoints, ...points.provincePoints.reduce((total, pointsX) => [...total, ...pointsX], [])]\n        : totalPoints\n        , [])\n\n      console.log('Cluster Points', clusterPoints)\n\n      let pointsThing = [\n        ...state.dates.get(action.date ? action.date : [...state.dates.keys()][state.dates.size - 1]).filter(country => country.Lat && country.Lon).map(location => ({\n          type: 'Feature',\n          properties: {\n            cluster: false,\n            category: location.City ? 'city' : location.Province ? 'province' : 'country',\n            cases: {\n              active: location.Active,\n              confirmed: location.Confirmed,\n              deaths: location.Deaths,\n              recovered: location.Recovered\n            },\n            city: location.City,\n            cityCode: location.CityCode,\n            country: location.Country,\n            countryCode: location.CountryCode,\n            province: location.Province,\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: [\n              parseFloat(location.Lon),\n              parseFloat(location.Lat)\n            ]\n          }\n        }))\n      ]\n\n      console.log('Points example', pointsThing)\n\n      return {\n        ...state,\n        clusterPoints: clusterPoints\n      }\n    default:\n      return { ...state };\n  }\n}\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './App';\nimport rootReducer from './reducers';\n\nimport './index.css';\n\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk),\n);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}